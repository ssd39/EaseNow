// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package EaseNow

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// EaseNowMetaData contains all meta data concerning the EaseNow contract.
var EaseNowMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"merchent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isContract\",\"type\":\"bool\"}],\"name\":\"AmountBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaingDebt\",\"type\":\"uint256\"}],\"name\":\"AmountRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"}],\"name\":\"LenderDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"LenderRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LenderWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defaultAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"privareData\",\"type\":\"bytes32\"}],\"name\":\"UserDefaulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"privateData\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creditLimit\",\"type\":\"uint256\"}],\"name\":\"UserRegistred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"merchent\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isContract\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"contractCalldata\",\"type\":\"bytes\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"faucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"seedProof_\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creditLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"privateData\",\"type\":\"bytes32\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"reportDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedProof\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPriceRatio\",\"type\":\"uint256\"}],\"name\":\"updatePriceRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6080604052683635c9adc5dea000006006556064600855348015610021575f80fd5b50336040518060400160405280600981526020017f45617365546f6b656e00000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f454e540000000000000000000000000000000000000000000000000000000000815250816003908161009e91906106e3565b5080600490816100ae91906106e3565b5050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610121575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161011891906107f1565b60405180910390fd5b6101308161014860201b60201c565b506101433360065461020b60201b60201c565b6108c7565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361027b575f6040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161027291906107f1565b60405180910390fd5b61028c5f838361029060201b60201c565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036102e0578060025f8282546102d49190610837565b925050819055506103ae565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610369578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161036093929190610879565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036103f5578060025f828254039250508190555061043f565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161049c91906108ae565b60405180910390a3505050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061052457607f821691505b602082108103610537576105366104e0565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026105997fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261055e565b6105a3868361055e565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6105e76105e26105dd846105bb565b6105c4565b6105bb565b9050919050565b5f819050919050565b610600836105cd565b61061461060c826105ee565b84845461056a565b825550505050565b5f90565b61062861061c565b6106338184846105f7565b505050565b5b818110156106565761064b5f82610620565b600181019050610639565b5050565b601f82111561069b5761066c8161053d565b6106758461054f565b81016020851015610684578190505b6106986106908561054f565b830182610638565b50505b505050565b5f82821c905092915050565b5f6106bb5f19846008026106a0565b1980831691505092915050565b5f6106d383836106ac565b9150826002028217905092915050565b6106ec826104a9565b67ffffffffffffffff811115610705576107046104b3565b5b61070f825461050d565b61071a82828561065a565b5f60209050601f83116001811461074b575f8415610739578287015190505b61074385826106c8565b8655506107aa565b601f1984166107598661053d565b5f5b828110156107805784890151825560018201915060208501945060208101905061075b565b8683101561079d5784890151610799601f8916826106ac565b8355505b6001600288020188555050505b505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6107db826107b2565b9050919050565b6107eb816107d1565b82525050565b5f6020820190506108045f8301846107e2565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610841826105bb565b915061084c836105bb565b92508282019050808211156108645761086361080a565b5b92915050565b610873816105bb565b82525050565b5f60608201905061088c5f8301866107e2565b610899602083018561086a565b6108a6604083018461086a565b949350505050565b5f6020820190506108c15f83018461086a565b92915050565b612fc2806108d45f395ff3fe608060405260043610610143575f3560e01c8063715018a6116100b5578063d0e30db01161006e578063d0e30db014610422578063d8bd92601461042c578063dd62ed3e14610454578063e531019614610490578063f2fde38b146104ba578063f9fbdb9e146104e25761014a565b8063715018a61461032c57806380bd29cc146103425780638da5cb5b1461036a57806395d89b4114610394578063a9059cbb146103be578063b86d1d63146103fa5761014a565b80632caabfef116101075780632caabfef146102445780632e1a7d4d1461026c578063313ce567146102945780633a7d5115146102be578063402d8883146102e657806370a08231146102f05761014a565b806306fdde031461014e578063095ea7b3146101785780630aa2f420146101b457806318160ddd146101de57806323b872dd146102085761014a565b3661014a57005b5f80fd5b348015610159575f80fd5b5061016261050a565b60405161016f9190611cf3565b60405180910390f35b348015610183575f80fd5b5061019e60048036038101906101999190611db1565b61059a565b6040516101ab9190611e09565b60405180910390f35b3480156101bf575f80fd5b506101c86105bc565b6040516101d59190611e31565b60405180910390f35b3480156101e9575f80fd5b506101f26105c2565b6040516101ff9190611e31565b60405180910390f35b348015610213575f80fd5b5061022e60048036038101906102299190611e4a565b6105cb565b60405161023b9190611e09565b60405180910390f35b34801561024f575f80fd5b5061026a60048036038101906102659190611ecd565b6105f9565b005b348015610277575f80fd5b50610292600480360381019061028d9190611f1d565b6106f0565b005b34801561029f575f80fd5b506102a8610996565b6040516102b59190611f63565b60405180910390f35b3480156102c9575f80fd5b506102e460048036038101906102df9190611f7c565b61099e565b005b6102ee610b09565b005b3480156102fb575f80fd5b5061031660048036038101906103119190611f7c565b610c69565b6040516103239190611e31565b60405180910390f35b348015610337575f80fd5b50610340610cae565b005b34801561034d575f80fd5b506103686004803603810190610363919061219b565b610cc1565b005b348015610375575f80fd5b5061037e610fdd565b60405161038b919061226b565b60405180910390f35b34801561039f575f80fd5b506103a8611005565b6040516103b59190611cf3565b60405180910390f35b3480156103c9575f80fd5b506103e460048036038101906103df9190611db1565b611095565b6040516103f19190611e09565b60405180910390f35b348015610405575f80fd5b50610420600480360381019061041b9190611f7c565b6110b7565b005b61042a6110d5565b005b348015610437575f80fd5b50610452600480360381019061044d9190611f1d565b611206565b005b34801561045f575f80fd5b5061047a60048036038101906104759190612284565b611268565b6040516104879190611e31565b60405180910390f35b34801561049b575f80fd5b506104a46112ea565b6040516104b19190611cf3565b60405180910390f35b3480156104c5575f80fd5b506104e060048036038101906104db9190611f7c565b611376565b005b3480156104ed575f80fd5b50610508600480360381019061050391906122c2565b6113fa565b005b60606003805461051990612336565b80601f016020809104026020016040519081016040528092919081815260200182805461054590612336565b80156105905780601f1061056757610100808354040283529160200191610590565b820191905f5260205f20905b81548152906001019060200180831161057357829003601f168201915b5050505050905090565b5f806105a4611466565b90506105b181858561146d565b600191505092915050565b60085481565b5f600254905090565b5f806105d5611466565b90506105e285828561147f565b6105ed858585611511565b60019150509392505050565b610601611601565b5f60095f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090505f801b816001015414610689576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610680906123b0565b60405180910390fd5b81816001018190555082815f01819055508373ffffffffffffffffffffffffffffffffffffffff167f7338f2f0fce044e8ff9f8257e4426c8912aa5dc780cbf77f446d4b10dd11a7e083856040516106e29291906123dd565b60405180910390a250505050565b5f600a5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090508181600101541015610777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076e90612474565b60405180910390fd5b43603c825f015461078891906124bf565b11156107c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c090612562565b60405180910390fd5b5f6107df825f0154836001015443600854611688565b90505f8114610841576107f233826116da565b3373ffffffffffffffffffffffffffffffffffffffff167f38af265c68180096307acf94a0034cafb4c264beb9c216b7f8b8776b57e82110826040516108389190611e31565b60405180910390a25b82826001015f8282546108549190612580565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167ff1efcc5bb6f7c762ce11c94881410b55191722a008338c0c9a88203c74604aea846040516108a19190611e31565b60405180910390a2824710156108dc575f47846108be9190612580565b90506108d733600854836108d291906125b3565b6116da565b479350505b5f831115610991575f803373ffffffffffffffffffffffffffffffffffffffff168560405161090a90612621565b5f6040518083038185875af1925050503d805f8114610944576040519150601f19603f3d011682016040523d82523d5f602084013e610949565b606091505b50915091508161098e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109859061267f565b60405180910390fd5b50505b505050565b5f6012905090565b5f60095f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f209050806004015f9054906101000a900460ff1615610a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a26906126e7565b60405180910390fd5b5f8160020154118015610a52575043605a8260030154610a4f91906124bf565b11155b610a91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8890612775565b60405180910390fd5b6001816004015f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167ff08fd0dc9b5a0e09baf039a4d7a8897a6ab538c6de1e8e4c40c82560090b387582600201548360010154604051610afd929190612793565b60405180910390a25050565b5f60095f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090508060020154341015610b90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b879061282a565b60405180910390fd5b5f610ba05f34603c600854611688565b905080610bac33610c69565b1015610bed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be490612892565b60405180910390fd5b610bf73382611759565b34826002015f828254610c0a9190612580565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f0f2afdea007852c85c572fd5ec20aede9297fb7614b1cbcd5594de764d3328ff348460020154604051610c5d9291906128b0565b60405180910390a25050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610cb6611601565b610cbf5f6117d8565b565b5f60095f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090505f801b816001015403610d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4090612921565b60405180910390fd5b868160020154825f0154610d5d9190612580565b1015610d9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d95906129af565b60405180910390fd5b806004015f9054906101000a900460ff1615610def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de690612a17565b60405180910390fd5b86816002015f828254610e0291906124bf565b925050819055508573ffffffffffffffffffffffffffffffffffffffff167f4a5e51d5fa38d82640c292f217e66cef5d8467ca4826221b95059f15d41da5f5888360020154845f0154610e559190612580565b8787604051610e679493929190612a35565b60405180910390a282610f25575f808573ffffffffffffffffffffffffffffffffffffffff1689604051610e9a90612621565b5f6040518083038185875af1925050503d805f8114610ed4576040519150601f19603f3d011682016040523d82523d5f602084013e610ed9565b606091505b509150915081610f1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1590612ac2565b60405180910390fd5b5050610fd4565b5f808573ffffffffffffffffffffffffffffffffffffffff168985604051610f4d9190612b1a565b5f6040518083038185875af1925050503d805f8114610f87576040519150601f19603f3d011682016040523d82523d5f602084013e610f8c565b606091505b509150915081610fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc890612ba0565b60405180910390fd5b50505b50505050505050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461101490612336565b80601f016020809104026020016040519081016040528092919081815260200182805461104090612336565b801561108b5780601f106110625761010080835404028352916020019161108b565b820191905f5260205f20905b81548152906001019060200180831161106e57829003601f168201915b5050505050905090565b5f8061109f611466565b90506110ac818585611511565b600191505092915050565b6110bf611601565b6110d28168056bc75e2d631000006116da565b50565b5f600a5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090505f61112b825f0154836001015443600854611688565b90505f811461118d5761113e33826116da565b3373ffffffffffffffffffffffffffffffffffffffff167f38af265c68180096307acf94a0034cafb4c264beb9c216b7f8b8776b57e82110826040516111849190611e31565b60405180910390a25b34826001015f8282546111a091906124bf565b9250508190555043825f01819055503373ffffffffffffffffffffffffffffffffffffffff167f4d0e8513a525a0e8d883d0fb5bf24c215136a9a954918fbce6d9f03d9bfacd1334845f01546040516111fa9291906128b0565b60405180910390a25050565b61120e611601565b5f6007805461121c90612336565b90500361125e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125590612c08565b60405180910390fd5b8060088190555050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b600780546112f790612336565b80601f016020809104026020016040519081016040528092919081815260200182805461132390612336565b801561136e5780601f106113455761010080835404028352916020019161136e565b820191905f5260205f20905b81548152906001019060200180831161135157829003601f168201915b505050505081565b61137e611601565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113ee575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016113e5919061226b565b60405180910390fd5b6113f7816117d8565b50565b5f6007805461140890612336565b90501461144a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144190612c70565b60405180910390fd5b80600790816114599190612e2b565b50611463336117d8565b50565b5f33905090565b61147a838383600161189b565b505050565b5f61148a8484611268565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461150b57818110156114fc578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016114f393929190612efa565b60405180910390fd5b61150a84848484035f61189b565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611581575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401611578919061226b565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115f1575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016115e8919061226b565b60405180910390fd5b6115fc838383611a6a565b505050565b611609611466565b73ffffffffffffffffffffffffffffffffffffffff16611627610fdd565b73ffffffffffffffffffffffffffffffffffffffff16146116865761164a611466565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161167d919061226b565b60405180910390fd5b565b5f603c85846116979190612580565b6103e8600f85886116a891906125b3565b6116b291906125b3565b6116bc9190612f5c565b6116c691906125b3565b6116d09190612f5c565b9050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361174a575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401611741919061226b565b60405180910390fd5b6117555f8383611a6a565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117c9575f6040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016117c0919061226b565b60405180910390fd5b6117d4825f83611a6a565b5050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361190b575f6040517fe602df05000000000000000000000000000000000000000000000000000000008152600401611902919061226b565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361197b575f6040517f94280d62000000000000000000000000000000000000000000000000000000008152600401611972919061226b565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611a64578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051611a5b9190611e31565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611aba578060025f828254611aae91906124bf565b92505081905550611b88565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015611b43578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401611b3a93929190612efa565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611bcf578060025f8282540392505081905550611c19565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611c769190611e31565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611cc582611c83565b611ccf8185611c8d565b9350611cdf818560208601611c9d565b611ce881611cab565b840191505092915050565b5f6020820190508181035f830152611d0b8184611cbb565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611d4d82611d24565b9050919050565b611d5d81611d43565b8114611d67575f80fd5b50565b5f81359050611d7881611d54565b92915050565b5f819050919050565b611d9081611d7e565b8114611d9a575f80fd5b50565b5f81359050611dab81611d87565b92915050565b5f8060408385031215611dc757611dc6611d1c565b5b5f611dd485828601611d6a565b9250506020611de585828601611d9d565b9150509250929050565b5f8115159050919050565b611e0381611def565b82525050565b5f602082019050611e1c5f830184611dfa565b92915050565b611e2b81611d7e565b82525050565b5f602082019050611e445f830184611e22565b92915050565b5f805f60608486031215611e6157611e60611d1c565b5b5f611e6e86828701611d6a565b9350506020611e7f86828701611d6a565b9250506040611e9086828701611d9d565b9150509250925092565b5f819050919050565b611eac81611e9a565b8114611eb6575f80fd5b50565b5f81359050611ec781611ea3565b92915050565b5f805f60608486031215611ee457611ee3611d1c565b5b5f611ef186828701611d6a565b9350506020611f0286828701611d9d565b9250506040611f1386828701611eb9565b9150509250925092565b5f60208284031215611f3257611f31611d1c565b5b5f611f3f84828501611d9d565b91505092915050565b5f60ff82169050919050565b611f5d81611f48565b82525050565b5f602082019050611f765f830184611f54565b92915050565b5f60208284031215611f9157611f90611d1c565b5b5f611f9e84828501611d6a565b91505092915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611fe582611cab565b810181811067ffffffffffffffff8211171561200457612003611faf565b5b80604052505050565b5f612016611d13565b90506120228282611fdc565b919050565b5f67ffffffffffffffff82111561204157612040611faf565b5b61204a82611cab565b9050602081019050919050565b828183375f83830152505050565b5f61207761207284612027565b61200d565b90508281526020810184848401111561209357612092611fab565b5b61209e848285612057565b509392505050565b5f82601f8301126120ba576120b9611fa7565b5b81356120ca848260208601612065565b91505092915050565b6120dc81611def565b81146120e6575f80fd5b50565b5f813590506120f7816120d3565b92915050565b5f67ffffffffffffffff82111561211757612116611faf565b5b61212082611cab565b9050602081019050919050565b5f61213f61213a846120fd565b61200d565b90508281526020810184848401111561215b5761215a611fab565b5b612166848285612057565b509392505050565b5f82601f83011261218257612181611fa7565b5b813561219284826020860161212d565b91505092915050565b5f805f805f8060c087890312156121b5576121b4611d1c565b5b5f6121c289828a01611d9d565b96505060206121d389828a01611d6a565b955050604087013567ffffffffffffffff8111156121f4576121f3611d20565b5b61220089828a016120a6565b945050606061221189828a01611d6a565b935050608061222289828a016120e9565b92505060a087013567ffffffffffffffff81111561224357612242611d20565b5b61224f89828a0161216e565b9150509295509295509295565b61226581611d43565b82525050565b5f60208201905061227e5f83018461225c565b92915050565b5f806040838503121561229a57612299611d1c565b5b5f6122a785828601611d6a565b92505060206122b885828601611d6a565b9150509250929050565b5f602082840312156122d7576122d6611d1c565b5b5f82013567ffffffffffffffff8111156122f4576122f3611d20565b5b612300848285016120a6565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061234d57607f821691505b6020821081036123605761235f612309565b5b50919050565b7f5573657220616c726561647920726567697374657265642100000000000000005f82015250565b5f61239a601883611c8d565b91506123a582612366565b602082019050919050565b5f6020820190508181035f8301526123c78161238e565b9050919050565b6123d781611e9a565b82525050565b5f6040820190506123f05f8301856123ce565b6123fd6020830184611e22565b9392505050565b7f43616e2774207769746864726177206d6f7265207468656e20796f75722062615f8201527f6c616e6365210000000000000000000000000000000000000000000000000000602082015250565b5f61245e602683611c8d565b915061246982612404565b604082019050919050565b5f6020820190508181035f83015261248b81612452565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6124c982611d7e565b91506124d483611d7e565b92508282019050808211156124ec576124eb612492565b5b92915050565b7f5769746864726177696e6720616d6f756e74206265666f72652020756e6c6f635f8201527f6b206379636c6521000000000000000000000000000000000000000000000000602082015250565b5f61254c602883611c8d565b9150612557826124f2565b604082019050919050565b5f6020820190508181035f83015261257981612540565b9050919050565b5f61258a82611d7e565b915061259583611d7e565b92508282039050818111156125ad576125ac612492565b5b92915050565b5f6125bd82611d7e565b91506125c883611d7e565b92508282026125d681611d7e565b915082820484148315176125ed576125ec612492565b5b5092915050565b5f81905092915050565b50565b5f61260c5f836125f4565b9150612617826125fe565b5f82019050919050565b5f61262b82612601565b9150819050919050565b7f4661696c656420746f20776974686472617721000000000000000000000000005f82015250565b5f612669601383611c8d565b915061267482612635565b602082019050919050565b5f6020820190508181035f8301526126968161265d565b9050919050565b7f5573657220616c72656164792064656661756c746564210000000000000000005f82015250565b5f6126d1601783611c8d565b91506126dc8261269d565b602082019050919050565b5f6020820190508181035f8301526126fe816126c5565b9050919050565b7f44656661756c7465642075736572206372697465726961206e6f74206d6174635f8201527f6865642100000000000000000000000000000000000000000000000000000000602082015250565b5f61275f602483611c8d565b915061276a82612705565b604082019050919050565b5f6020820190508181035f83015261278c81612753565b9050919050565b5f6040820190506127a65f830185611e22565b6127b360208301846123ce565b9392505050565b7f596f752061726520706179696e67206d6f7265207468656e20796f75722064655f8201527f627420616d6f756e740000000000000000000000000000000000000000000000602082015250565b5f612814602983611c8d565b915061281f826127ba565b604082019050919050565b5f6020820190508181035f83015261284181612808565b9050919050565b7f4e6f7420656e6f75676820454e5420746f2070617920666565730000000000005f82015250565b5f61287c601a83611c8d565b915061288782612848565b602082019050919050565b5f6020820190508181035f8301526128a981612870565b9050919050565b5f6040820190506128c35f830185611e22565b6128d06020830184611e22565b9392505050565b7f55736572206e6f7420666f756e642100000000000000000000000000000000005f82015250565b5f61290b600f83611c8d565b9150612916826128d7565b602082019050919050565b5f6020820190508181035f830152612938816128ff565b9050919050565b7f5370656e64696e67206d6f7265207468656e20796f757220637265646974206c5f8201527f696d697421000000000000000000000000000000000000000000000000000000602082015250565b5f612999602583611c8d565b91506129a48261293f565b604082019050919050565b5f6020820190508181035f8301526129c68161298d565b9050919050565b7f596f7572206163636f756e742069732064656661756c746564210000000000005f82015250565b5f612a01601a83611c8d565b9150612a0c826129cd565b602082019050919050565b5f6020820190508181035f830152612a2e816129f5565b9050919050565b5f608082019050612a485f830187611e22565b612a556020830186611e22565b612a62604083018561225c565b612a6f6060830184611dfa565b95945050505050565b7f4661696c656420746f2073656e642045746865720000000000000000000000005f82015250565b5f612aac601483611c8d565b9150612ab782612a78565b602082019050919050565b5f6020820190508181035f830152612ad981612aa0565b9050919050565b5f81519050919050565b5f612af482612ae0565b612afe81856125f4565b9350612b0e818560208601611c9d565b80840191505092915050565b5f612b258284612aea565b915081905092915050565b7f5472616e73616374696f6e20746f206d65726368656e7420636f6e74726163745f8201527f206661696c656421000000000000000000000000000000000000000000000000602082015250565b5f612b8a602883611c8d565b9150612b9582612b30565b604082019050919050565b5f6020820190508181035f830152612bb781612b7e565b9050919050565b7f436f7265206e6f7420696e7469616c69736564207965742100000000000000005f82015250565b5f612bf2601883611c8d565b9150612bfd82612bbe565b602082019050919050565b5f6020820190508181035f830152612c1f81612be6565b9050919050565b7f416c726561647920696e697469616c69736564210000000000000000000000005f82015250565b5f612c5a601483611c8d565b9150612c6582612c26565b602082019050919050565b5f6020820190508181035f830152612c8781612c4e565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612cea7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612caf565b612cf48683612caf565b95508019841693508086168417925050509392505050565b5f819050919050565b5f612d2f612d2a612d2584611d7e565b612d0c565b611d7e565b9050919050565b5f819050919050565b612d4883612d15565b612d5c612d5482612d36565b848454612cbb565b825550505050565b5f90565b612d70612d64565b612d7b818484612d3f565b505050565b5b81811015612d9e57612d935f82612d68565b600181019050612d81565b5050565b601f821115612de357612db481612c8e565b612dbd84612ca0565b81016020851015612dcc578190505b612de0612dd885612ca0565b830182612d80565b50505b505050565b5f82821c905092915050565b5f612e035f1984600802612de8565b1980831691505092915050565b5f612e1b8383612df4565b9150826002028217905092915050565b612e3482611c83565b67ffffffffffffffff811115612e4d57612e4c611faf565b5b612e578254612336565b612e62828285612da2565b5f60209050601f831160018114612e93575f8415612e81578287015190505b612e8b8582612e10565b865550612ef2565b601f198416612ea186612c8e565b5f5b82811015612ec857848901518255600182019150602085019450602081019050612ea3565b86831015612ee55784890151612ee1601f891682612df4565b8355505b6001600288020188555050505b505050505050565b5f606082019050612f0d5f83018661225c565b612f1a6020830185611e22565b612f276040830184611e22565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f612f6682611d7e565b9150612f7183611d7e565b925082612f8157612f80612f2f565b5b82820490509291505056fea26469706673582212204c7f6a1e9c76d215ab61afc81b2c67d1fa763cf844caa7afbdd16ce9ecbbecf764736f6c634300081a0033",
}

// EaseNowABI is the input ABI used to generate the binding from.
// Deprecated: Use EaseNowMetaData.ABI instead.
var EaseNowABI = EaseNowMetaData.ABI

// EaseNowBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EaseNowMetaData.Bin instead.
var EaseNowBin = EaseNowMetaData.Bin

// DeployEaseNow deploys a new Ethereum contract, binding an instance of EaseNow to it.
func DeployEaseNow(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EaseNow, error) {
	parsed, err := EaseNowMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EaseNowBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EaseNow{EaseNowCaller: EaseNowCaller{contract: contract}, EaseNowTransactor: EaseNowTransactor{contract: contract}, EaseNowFilterer: EaseNowFilterer{contract: contract}}, nil
}

// EaseNow is an auto generated Go binding around an Ethereum contract.
type EaseNow struct {
	EaseNowCaller     // Read-only binding to the contract
	EaseNowTransactor // Write-only binding to the contract
	EaseNowFilterer   // Log filterer for contract events
}

// EaseNowCaller is an auto generated read-only Go binding around an Ethereum contract.
type EaseNowCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EaseNowTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EaseNowTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EaseNowFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EaseNowFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EaseNowSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EaseNowSession struct {
	Contract     *EaseNow          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EaseNowCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EaseNowCallerSession struct {
	Contract *EaseNowCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// EaseNowTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EaseNowTransactorSession struct {
	Contract     *EaseNowTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// EaseNowRaw is an auto generated low-level Go binding around an Ethereum contract.
type EaseNowRaw struct {
	Contract *EaseNow // Generic contract binding to access the raw methods on
}

// EaseNowCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EaseNowCallerRaw struct {
	Contract *EaseNowCaller // Generic read-only contract binding to access the raw methods on
}

// EaseNowTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EaseNowTransactorRaw struct {
	Contract *EaseNowTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEaseNow creates a new instance of EaseNow, bound to a specific deployed contract.
func NewEaseNow(address common.Address, backend bind.ContractBackend) (*EaseNow, error) {
	contract, err := bindEaseNow(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EaseNow{EaseNowCaller: EaseNowCaller{contract: contract}, EaseNowTransactor: EaseNowTransactor{contract: contract}, EaseNowFilterer: EaseNowFilterer{contract: contract}}, nil
}

// NewEaseNowCaller creates a new read-only instance of EaseNow, bound to a specific deployed contract.
func NewEaseNowCaller(address common.Address, caller bind.ContractCaller) (*EaseNowCaller, error) {
	contract, err := bindEaseNow(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EaseNowCaller{contract: contract}, nil
}

// NewEaseNowTransactor creates a new write-only instance of EaseNow, bound to a specific deployed contract.
func NewEaseNowTransactor(address common.Address, transactor bind.ContractTransactor) (*EaseNowTransactor, error) {
	contract, err := bindEaseNow(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EaseNowTransactor{contract: contract}, nil
}

// NewEaseNowFilterer creates a new log filterer instance of EaseNow, bound to a specific deployed contract.
func NewEaseNowFilterer(address common.Address, filterer bind.ContractFilterer) (*EaseNowFilterer, error) {
	contract, err := bindEaseNow(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EaseNowFilterer{contract: contract}, nil
}

// bindEaseNow binds a generic wrapper to an already deployed contract.
func bindEaseNow(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := EaseNowMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EaseNow *EaseNowRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EaseNow.Contract.EaseNowCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EaseNow *EaseNowRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EaseNow.Contract.EaseNowTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EaseNow *EaseNowRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EaseNow.Contract.EaseNowTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EaseNow *EaseNowCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EaseNow.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EaseNow *EaseNowTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EaseNow.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EaseNow *EaseNowTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EaseNow.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_EaseNow *EaseNowCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _EaseNow.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_EaseNow *EaseNowSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _EaseNow.Contract.Allowance(&_EaseNow.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_EaseNow *EaseNowCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _EaseNow.Contract.Allowance(&_EaseNow.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_EaseNow *EaseNowCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _EaseNow.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_EaseNow *EaseNowSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _EaseNow.Contract.BalanceOf(&_EaseNow.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_EaseNow *EaseNowCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _EaseNow.Contract.BalanceOf(&_EaseNow.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_EaseNow *EaseNowCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _EaseNow.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_EaseNow *EaseNowSession) Decimals() (uint8, error) {
	return _EaseNow.Contract.Decimals(&_EaseNow.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_EaseNow *EaseNowCallerSession) Decimals() (uint8, error) {
	return _EaseNow.Contract.Decimals(&_EaseNow.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_EaseNow *EaseNowCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _EaseNow.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_EaseNow *EaseNowSession) Name() (string, error) {
	return _EaseNow.Contract.Name(&_EaseNow.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_EaseNow *EaseNowCallerSession) Name() (string, error) {
	return _EaseNow.Contract.Name(&_EaseNow.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_EaseNow *EaseNowCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EaseNow.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_EaseNow *EaseNowSession) Owner() (common.Address, error) {
	return _EaseNow.Contract.Owner(&_EaseNow.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_EaseNow *EaseNowCallerSession) Owner() (common.Address, error) {
	return _EaseNow.Contract.Owner(&_EaseNow.CallOpts)
}

// PriceRatio is a free data retrieval call binding the contract method 0x0aa2f420.
//
// Solidity: function priceRatio() view returns(uint256)
func (_EaseNow *EaseNowCaller) PriceRatio(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EaseNow.contract.Call(opts, &out, "priceRatio")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PriceRatio is a free data retrieval call binding the contract method 0x0aa2f420.
//
// Solidity: function priceRatio() view returns(uint256)
func (_EaseNow *EaseNowSession) PriceRatio() (*big.Int, error) {
	return _EaseNow.Contract.PriceRatio(&_EaseNow.CallOpts)
}

// PriceRatio is a free data retrieval call binding the contract method 0x0aa2f420.
//
// Solidity: function priceRatio() view returns(uint256)
func (_EaseNow *EaseNowCallerSession) PriceRatio() (*big.Int, error) {
	return _EaseNow.Contract.PriceRatio(&_EaseNow.CallOpts)
}

// SeedProof is a free data retrieval call binding the contract method 0xe5310196.
//
// Solidity: function seedProof() view returns(string)
func (_EaseNow *EaseNowCaller) SeedProof(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _EaseNow.contract.Call(opts, &out, "seedProof")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SeedProof is a free data retrieval call binding the contract method 0xe5310196.
//
// Solidity: function seedProof() view returns(string)
func (_EaseNow *EaseNowSession) SeedProof() (string, error) {
	return _EaseNow.Contract.SeedProof(&_EaseNow.CallOpts)
}

// SeedProof is a free data retrieval call binding the contract method 0xe5310196.
//
// Solidity: function seedProof() view returns(string)
func (_EaseNow *EaseNowCallerSession) SeedProof() (string, error) {
	return _EaseNow.Contract.SeedProof(&_EaseNow.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_EaseNow *EaseNowCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _EaseNow.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_EaseNow *EaseNowSession) Symbol() (string, error) {
	return _EaseNow.Contract.Symbol(&_EaseNow.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_EaseNow *EaseNowCallerSession) Symbol() (string, error) {
	return _EaseNow.Contract.Symbol(&_EaseNow.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_EaseNow *EaseNowCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EaseNow.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_EaseNow *EaseNowSession) TotalSupply() (*big.Int, error) {
	return _EaseNow.Contract.TotalSupply(&_EaseNow.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_EaseNow *EaseNowCallerSession) TotalSupply() (*big.Int, error) {
	return _EaseNow.Contract.TotalSupply(&_EaseNow.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_EaseNow *EaseNowTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _EaseNow.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_EaseNow *EaseNowSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _EaseNow.Contract.Approve(&_EaseNow.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_EaseNow *EaseNowTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _EaseNow.Contract.Approve(&_EaseNow.TransactOpts, spender, value)
}

// Borrow is a paid mutator transaction binding the contract method 0x80bd29cc.
//
// Solidity: function borrow(uint256 amount, address userAddress, string signature, address merchent, bool isContract, bytes contractCalldata) returns()
func (_EaseNow *EaseNowTransactor) Borrow(opts *bind.TransactOpts, amount *big.Int, userAddress common.Address, signature string, merchent common.Address, isContract bool, contractCalldata []byte) (*types.Transaction, error) {
	return _EaseNow.contract.Transact(opts, "borrow", amount, userAddress, signature, merchent, isContract, contractCalldata)
}

// Borrow is a paid mutator transaction binding the contract method 0x80bd29cc.
//
// Solidity: function borrow(uint256 amount, address userAddress, string signature, address merchent, bool isContract, bytes contractCalldata) returns()
func (_EaseNow *EaseNowSession) Borrow(amount *big.Int, userAddress common.Address, signature string, merchent common.Address, isContract bool, contractCalldata []byte) (*types.Transaction, error) {
	return _EaseNow.Contract.Borrow(&_EaseNow.TransactOpts, amount, userAddress, signature, merchent, isContract, contractCalldata)
}

// Borrow is a paid mutator transaction binding the contract method 0x80bd29cc.
//
// Solidity: function borrow(uint256 amount, address userAddress, string signature, address merchent, bool isContract, bytes contractCalldata) returns()
func (_EaseNow *EaseNowTransactorSession) Borrow(amount *big.Int, userAddress common.Address, signature string, merchent common.Address, isContract bool, contractCalldata []byte) (*types.Transaction, error) {
	return _EaseNow.Contract.Borrow(&_EaseNow.TransactOpts, amount, userAddress, signature, merchent, isContract, contractCalldata)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_EaseNow *EaseNowTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EaseNow.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_EaseNow *EaseNowSession) Deposit() (*types.Transaction, error) {
	return _EaseNow.Contract.Deposit(&_EaseNow.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_EaseNow *EaseNowTransactorSession) Deposit() (*types.Transaction, error) {
	return _EaseNow.Contract.Deposit(&_EaseNow.TransactOpts)
}

// Faucet is a paid mutator transaction binding the contract method 0xb86d1d63.
//
// Solidity: function faucet(address account) returns()
func (_EaseNow *EaseNowTransactor) Faucet(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EaseNow.contract.Transact(opts, "faucet", account)
}

// Faucet is a paid mutator transaction binding the contract method 0xb86d1d63.
//
// Solidity: function faucet(address account) returns()
func (_EaseNow *EaseNowSession) Faucet(account common.Address) (*types.Transaction, error) {
	return _EaseNow.Contract.Faucet(&_EaseNow.TransactOpts, account)
}

// Faucet is a paid mutator transaction binding the contract method 0xb86d1d63.
//
// Solidity: function faucet(address account) returns()
func (_EaseNow *EaseNowTransactorSession) Faucet(account common.Address) (*types.Transaction, error) {
	return _EaseNow.Contract.Faucet(&_EaseNow.TransactOpts, account)
}

// Init is a paid mutator transaction binding the contract method 0xf9fbdb9e.
//
// Solidity: function init(string seedProof_) returns()
func (_EaseNow *EaseNowTransactor) Init(opts *bind.TransactOpts, seedProof_ string) (*types.Transaction, error) {
	return _EaseNow.contract.Transact(opts, "init", seedProof_)
}

// Init is a paid mutator transaction binding the contract method 0xf9fbdb9e.
//
// Solidity: function init(string seedProof_) returns()
func (_EaseNow *EaseNowSession) Init(seedProof_ string) (*types.Transaction, error) {
	return _EaseNow.Contract.Init(&_EaseNow.TransactOpts, seedProof_)
}

// Init is a paid mutator transaction binding the contract method 0xf9fbdb9e.
//
// Solidity: function init(string seedProof_) returns()
func (_EaseNow *EaseNowTransactorSession) Init(seedProof_ string) (*types.Transaction, error) {
	return _EaseNow.Contract.Init(&_EaseNow.TransactOpts, seedProof_)
}

// RegisterUser is a paid mutator transaction binding the contract method 0x2caabfef.
//
// Solidity: function registerUser(address userAddress, uint256 creditLimit, bytes32 privateData) returns()
func (_EaseNow *EaseNowTransactor) RegisterUser(opts *bind.TransactOpts, userAddress common.Address, creditLimit *big.Int, privateData [32]byte) (*types.Transaction, error) {
	return _EaseNow.contract.Transact(opts, "registerUser", userAddress, creditLimit, privateData)
}

// RegisterUser is a paid mutator transaction binding the contract method 0x2caabfef.
//
// Solidity: function registerUser(address userAddress, uint256 creditLimit, bytes32 privateData) returns()
func (_EaseNow *EaseNowSession) RegisterUser(userAddress common.Address, creditLimit *big.Int, privateData [32]byte) (*types.Transaction, error) {
	return _EaseNow.Contract.RegisterUser(&_EaseNow.TransactOpts, userAddress, creditLimit, privateData)
}

// RegisterUser is a paid mutator transaction binding the contract method 0x2caabfef.
//
// Solidity: function registerUser(address userAddress, uint256 creditLimit, bytes32 privateData) returns()
func (_EaseNow *EaseNowTransactorSession) RegisterUser(userAddress common.Address, creditLimit *big.Int, privateData [32]byte) (*types.Transaction, error) {
	return _EaseNow.Contract.RegisterUser(&_EaseNow.TransactOpts, userAddress, creditLimit, privateData)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_EaseNow *EaseNowTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EaseNow.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_EaseNow *EaseNowSession) RenounceOwnership() (*types.Transaction, error) {
	return _EaseNow.Contract.RenounceOwnership(&_EaseNow.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_EaseNow *EaseNowTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _EaseNow.Contract.RenounceOwnership(&_EaseNow.TransactOpts)
}

// Repay is a paid mutator transaction binding the contract method 0x402d8883.
//
// Solidity: function repay() payable returns()
func (_EaseNow *EaseNowTransactor) Repay(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EaseNow.contract.Transact(opts, "repay")
}

// Repay is a paid mutator transaction binding the contract method 0x402d8883.
//
// Solidity: function repay() payable returns()
func (_EaseNow *EaseNowSession) Repay() (*types.Transaction, error) {
	return _EaseNow.Contract.Repay(&_EaseNow.TransactOpts)
}

// Repay is a paid mutator transaction binding the contract method 0x402d8883.
//
// Solidity: function repay() payable returns()
func (_EaseNow *EaseNowTransactorSession) Repay() (*types.Transaction, error) {
	return _EaseNow.Contract.Repay(&_EaseNow.TransactOpts)
}

// ReportDefault is a paid mutator transaction binding the contract method 0x3a7d5115.
//
// Solidity: function reportDefault(address userAddress) returns()
func (_EaseNow *EaseNowTransactor) ReportDefault(opts *bind.TransactOpts, userAddress common.Address) (*types.Transaction, error) {
	return _EaseNow.contract.Transact(opts, "reportDefault", userAddress)
}

// ReportDefault is a paid mutator transaction binding the contract method 0x3a7d5115.
//
// Solidity: function reportDefault(address userAddress) returns()
func (_EaseNow *EaseNowSession) ReportDefault(userAddress common.Address) (*types.Transaction, error) {
	return _EaseNow.Contract.ReportDefault(&_EaseNow.TransactOpts, userAddress)
}

// ReportDefault is a paid mutator transaction binding the contract method 0x3a7d5115.
//
// Solidity: function reportDefault(address userAddress) returns()
func (_EaseNow *EaseNowTransactorSession) ReportDefault(userAddress common.Address) (*types.Transaction, error) {
	return _EaseNow.Contract.ReportDefault(&_EaseNow.TransactOpts, userAddress)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_EaseNow *EaseNowTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _EaseNow.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_EaseNow *EaseNowSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _EaseNow.Contract.Transfer(&_EaseNow.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_EaseNow *EaseNowTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _EaseNow.Contract.Transfer(&_EaseNow.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_EaseNow *EaseNowTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _EaseNow.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_EaseNow *EaseNowSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _EaseNow.Contract.TransferFrom(&_EaseNow.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_EaseNow *EaseNowTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _EaseNow.Contract.TransferFrom(&_EaseNow.TransactOpts, from, to, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_EaseNow *EaseNowTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _EaseNow.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_EaseNow *EaseNowSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _EaseNow.Contract.TransferOwnership(&_EaseNow.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_EaseNow *EaseNowTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _EaseNow.Contract.TransferOwnership(&_EaseNow.TransactOpts, newOwner)
}

// UpdatePriceRatio is a paid mutator transaction binding the contract method 0xd8bd9260.
//
// Solidity: function updatePriceRatio(uint256 newPriceRatio) returns()
func (_EaseNow *EaseNowTransactor) UpdatePriceRatio(opts *bind.TransactOpts, newPriceRatio *big.Int) (*types.Transaction, error) {
	return _EaseNow.contract.Transact(opts, "updatePriceRatio", newPriceRatio)
}

// UpdatePriceRatio is a paid mutator transaction binding the contract method 0xd8bd9260.
//
// Solidity: function updatePriceRatio(uint256 newPriceRatio) returns()
func (_EaseNow *EaseNowSession) UpdatePriceRatio(newPriceRatio *big.Int) (*types.Transaction, error) {
	return _EaseNow.Contract.UpdatePriceRatio(&_EaseNow.TransactOpts, newPriceRatio)
}

// UpdatePriceRatio is a paid mutator transaction binding the contract method 0xd8bd9260.
//
// Solidity: function updatePriceRatio(uint256 newPriceRatio) returns()
func (_EaseNow *EaseNowTransactorSession) UpdatePriceRatio(newPriceRatio *big.Int) (*types.Transaction, error) {
	return _EaseNow.Contract.UpdatePriceRatio(&_EaseNow.TransactOpts, newPriceRatio)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_EaseNow *EaseNowTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _EaseNow.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_EaseNow *EaseNowSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _EaseNow.Contract.Withdraw(&_EaseNow.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_EaseNow *EaseNowTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _EaseNow.Contract.Withdraw(&_EaseNow.TransactOpts, amount)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EaseNow *EaseNowTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EaseNow.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EaseNow *EaseNowSession) Receive() (*types.Transaction, error) {
	return _EaseNow.Contract.Receive(&_EaseNow.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EaseNow *EaseNowTransactorSession) Receive() (*types.Transaction, error) {
	return _EaseNow.Contract.Receive(&_EaseNow.TransactOpts)
}

// EaseNowAmountBorrowedIterator is returned from FilterAmountBorrowed and is used to iterate over the raw logs and unpacked data for AmountBorrowed events raised by the EaseNow contract.
type EaseNowAmountBorrowedIterator struct {
	Event *EaseNowAmountBorrowed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EaseNowAmountBorrowedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EaseNowAmountBorrowed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EaseNowAmountBorrowed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EaseNowAmountBorrowedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EaseNowAmountBorrowedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EaseNowAmountBorrowed represents a AmountBorrowed event raised by the EaseNow contract.
type EaseNowAmountBorrowed struct {
	UserAddress    common.Address
	Amount         *big.Int
	RemainingLimit *big.Int
	Merchent       common.Address
	IsContract     bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterAmountBorrowed is a free log retrieval operation binding the contract event 0x4a5e51d5fa38d82640c292f217e66cef5d8467ca4826221b95059f15d41da5f5.
//
// Solidity: event AmountBorrowed(address indexed userAddress, uint256 amount, uint256 remainingLimit, address merchent, bool isContract)
func (_EaseNow *EaseNowFilterer) FilterAmountBorrowed(opts *bind.FilterOpts, userAddress []common.Address) (*EaseNowAmountBorrowedIterator, error) {

	var userAddressRule []interface{}
	for _, userAddressItem := range userAddress {
		userAddressRule = append(userAddressRule, userAddressItem)
	}

	logs, sub, err := _EaseNow.contract.FilterLogs(opts, "AmountBorrowed", userAddressRule)
	if err != nil {
		return nil, err
	}
	return &EaseNowAmountBorrowedIterator{contract: _EaseNow.contract, event: "AmountBorrowed", logs: logs, sub: sub}, nil
}

// WatchAmountBorrowed is a free log subscription operation binding the contract event 0x4a5e51d5fa38d82640c292f217e66cef5d8467ca4826221b95059f15d41da5f5.
//
// Solidity: event AmountBorrowed(address indexed userAddress, uint256 amount, uint256 remainingLimit, address merchent, bool isContract)
func (_EaseNow *EaseNowFilterer) WatchAmountBorrowed(opts *bind.WatchOpts, sink chan<- *EaseNowAmountBorrowed, userAddress []common.Address) (event.Subscription, error) {

	var userAddressRule []interface{}
	for _, userAddressItem := range userAddress {
		userAddressRule = append(userAddressRule, userAddressItem)
	}

	logs, sub, err := _EaseNow.contract.WatchLogs(opts, "AmountBorrowed", userAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EaseNowAmountBorrowed)
				if err := _EaseNow.contract.UnpackLog(event, "AmountBorrowed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAmountBorrowed is a log parse operation binding the contract event 0x4a5e51d5fa38d82640c292f217e66cef5d8467ca4826221b95059f15d41da5f5.
//
// Solidity: event AmountBorrowed(address indexed userAddress, uint256 amount, uint256 remainingLimit, address merchent, bool isContract)
func (_EaseNow *EaseNowFilterer) ParseAmountBorrowed(log types.Log) (*EaseNowAmountBorrowed, error) {
	event := new(EaseNowAmountBorrowed)
	if err := _EaseNow.contract.UnpackLog(event, "AmountBorrowed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EaseNowAmountRepaidIterator is returned from FilterAmountRepaid and is used to iterate over the raw logs and unpacked data for AmountRepaid events raised by the EaseNow contract.
type EaseNowAmountRepaidIterator struct {
	Event *EaseNowAmountRepaid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EaseNowAmountRepaidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EaseNowAmountRepaid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EaseNowAmountRepaid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EaseNowAmountRepaidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EaseNowAmountRepaidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EaseNowAmountRepaid represents a AmountRepaid event raised by the EaseNow contract.
type EaseNowAmountRepaid struct {
	UserAddress common.Address
	Amount      *big.Int
	RemaingDebt *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAmountRepaid is a free log retrieval operation binding the contract event 0x0f2afdea007852c85c572fd5ec20aede9297fb7614b1cbcd5594de764d3328ff.
//
// Solidity: event AmountRepaid(address indexed userAddress, uint256 amount, uint256 remaingDebt)
func (_EaseNow *EaseNowFilterer) FilterAmountRepaid(opts *bind.FilterOpts, userAddress []common.Address) (*EaseNowAmountRepaidIterator, error) {

	var userAddressRule []interface{}
	for _, userAddressItem := range userAddress {
		userAddressRule = append(userAddressRule, userAddressItem)
	}

	logs, sub, err := _EaseNow.contract.FilterLogs(opts, "AmountRepaid", userAddressRule)
	if err != nil {
		return nil, err
	}
	return &EaseNowAmountRepaidIterator{contract: _EaseNow.contract, event: "AmountRepaid", logs: logs, sub: sub}, nil
}

// WatchAmountRepaid is a free log subscription operation binding the contract event 0x0f2afdea007852c85c572fd5ec20aede9297fb7614b1cbcd5594de764d3328ff.
//
// Solidity: event AmountRepaid(address indexed userAddress, uint256 amount, uint256 remaingDebt)
func (_EaseNow *EaseNowFilterer) WatchAmountRepaid(opts *bind.WatchOpts, sink chan<- *EaseNowAmountRepaid, userAddress []common.Address) (event.Subscription, error) {

	var userAddressRule []interface{}
	for _, userAddressItem := range userAddress {
		userAddressRule = append(userAddressRule, userAddressItem)
	}

	logs, sub, err := _EaseNow.contract.WatchLogs(opts, "AmountRepaid", userAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EaseNowAmountRepaid)
				if err := _EaseNow.contract.UnpackLog(event, "AmountRepaid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAmountRepaid is a log parse operation binding the contract event 0x0f2afdea007852c85c572fd5ec20aede9297fb7614b1cbcd5594de764d3328ff.
//
// Solidity: event AmountRepaid(address indexed userAddress, uint256 amount, uint256 remaingDebt)
func (_EaseNow *EaseNowFilterer) ParseAmountRepaid(log types.Log) (*EaseNowAmountRepaid, error) {
	event := new(EaseNowAmountRepaid)
	if err := _EaseNow.contract.UnpackLog(event, "AmountRepaid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EaseNowApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the EaseNow contract.
type EaseNowApprovalIterator struct {
	Event *EaseNowApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EaseNowApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EaseNowApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EaseNowApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EaseNowApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EaseNowApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EaseNowApproval represents a Approval event raised by the EaseNow contract.
type EaseNowApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_EaseNow *EaseNowFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*EaseNowApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _EaseNow.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &EaseNowApprovalIterator{contract: _EaseNow.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_EaseNow *EaseNowFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *EaseNowApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _EaseNow.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EaseNowApproval)
				if err := _EaseNow.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_EaseNow *EaseNowFilterer) ParseApproval(log types.Log) (*EaseNowApproval, error) {
	event := new(EaseNowApproval)
	if err := _EaseNow.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EaseNowLenderDepositIterator is returned from FilterLenderDeposit and is used to iterate over the raw logs and unpacked data for LenderDeposit events raised by the EaseNow contract.
type EaseNowLenderDepositIterator struct {
	Event *EaseNowLenderDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EaseNowLenderDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EaseNowLenderDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EaseNowLenderDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EaseNowLenderDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EaseNowLenderDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EaseNowLenderDeposit represents a LenderDeposit event raised by the EaseNow contract.
type EaseNowLenderDeposit struct {
	Lender   common.Address
	Amount   *big.Int
	Locktime *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLenderDeposit is a free log retrieval operation binding the contract event 0x4d0e8513a525a0e8d883d0fb5bf24c215136a9a954918fbce6d9f03d9bfacd13.
//
// Solidity: event LenderDeposit(address indexed lender, uint256 amount, uint256 locktime)
func (_EaseNow *EaseNowFilterer) FilterLenderDeposit(opts *bind.FilterOpts, lender []common.Address) (*EaseNowLenderDepositIterator, error) {

	var lenderRule []interface{}
	for _, lenderItem := range lender {
		lenderRule = append(lenderRule, lenderItem)
	}

	logs, sub, err := _EaseNow.contract.FilterLogs(opts, "LenderDeposit", lenderRule)
	if err != nil {
		return nil, err
	}
	return &EaseNowLenderDepositIterator{contract: _EaseNow.contract, event: "LenderDeposit", logs: logs, sub: sub}, nil
}

// WatchLenderDeposit is a free log subscription operation binding the contract event 0x4d0e8513a525a0e8d883d0fb5bf24c215136a9a954918fbce6d9f03d9bfacd13.
//
// Solidity: event LenderDeposit(address indexed lender, uint256 amount, uint256 locktime)
func (_EaseNow *EaseNowFilterer) WatchLenderDeposit(opts *bind.WatchOpts, sink chan<- *EaseNowLenderDeposit, lender []common.Address) (event.Subscription, error) {

	var lenderRule []interface{}
	for _, lenderItem := range lender {
		lenderRule = append(lenderRule, lenderItem)
	}

	logs, sub, err := _EaseNow.contract.WatchLogs(opts, "LenderDeposit", lenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EaseNowLenderDeposit)
				if err := _EaseNow.contract.UnpackLog(event, "LenderDeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLenderDeposit is a log parse operation binding the contract event 0x4d0e8513a525a0e8d883d0fb5bf24c215136a9a954918fbce6d9f03d9bfacd13.
//
// Solidity: event LenderDeposit(address indexed lender, uint256 amount, uint256 locktime)
func (_EaseNow *EaseNowFilterer) ParseLenderDeposit(log types.Log) (*EaseNowLenderDeposit, error) {
	event := new(EaseNowLenderDeposit)
	if err := _EaseNow.contract.UnpackLog(event, "LenderDeposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EaseNowLenderRewardedIterator is returned from FilterLenderRewarded and is used to iterate over the raw logs and unpacked data for LenderRewarded events raised by the EaseNow contract.
type EaseNowLenderRewardedIterator struct {
	Event *EaseNowLenderRewarded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EaseNowLenderRewardedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EaseNowLenderRewarded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EaseNowLenderRewarded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EaseNowLenderRewardedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EaseNowLenderRewardedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EaseNowLenderRewarded represents a LenderRewarded event raised by the EaseNow contract.
type EaseNowLenderRewarded struct {
	Lender       common.Address
	RewardAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterLenderRewarded is a free log retrieval operation binding the contract event 0x38af265c68180096307acf94a0034cafb4c264beb9c216b7f8b8776b57e82110.
//
// Solidity: event LenderRewarded(address indexed lender, uint256 rewardAmount)
func (_EaseNow *EaseNowFilterer) FilterLenderRewarded(opts *bind.FilterOpts, lender []common.Address) (*EaseNowLenderRewardedIterator, error) {

	var lenderRule []interface{}
	for _, lenderItem := range lender {
		lenderRule = append(lenderRule, lenderItem)
	}

	logs, sub, err := _EaseNow.contract.FilterLogs(opts, "LenderRewarded", lenderRule)
	if err != nil {
		return nil, err
	}
	return &EaseNowLenderRewardedIterator{contract: _EaseNow.contract, event: "LenderRewarded", logs: logs, sub: sub}, nil
}

// WatchLenderRewarded is a free log subscription operation binding the contract event 0x38af265c68180096307acf94a0034cafb4c264beb9c216b7f8b8776b57e82110.
//
// Solidity: event LenderRewarded(address indexed lender, uint256 rewardAmount)
func (_EaseNow *EaseNowFilterer) WatchLenderRewarded(opts *bind.WatchOpts, sink chan<- *EaseNowLenderRewarded, lender []common.Address) (event.Subscription, error) {

	var lenderRule []interface{}
	for _, lenderItem := range lender {
		lenderRule = append(lenderRule, lenderItem)
	}

	logs, sub, err := _EaseNow.contract.WatchLogs(opts, "LenderRewarded", lenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EaseNowLenderRewarded)
				if err := _EaseNow.contract.UnpackLog(event, "LenderRewarded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLenderRewarded is a log parse operation binding the contract event 0x38af265c68180096307acf94a0034cafb4c264beb9c216b7f8b8776b57e82110.
//
// Solidity: event LenderRewarded(address indexed lender, uint256 rewardAmount)
func (_EaseNow *EaseNowFilterer) ParseLenderRewarded(log types.Log) (*EaseNowLenderRewarded, error) {
	event := new(EaseNowLenderRewarded)
	if err := _EaseNow.contract.UnpackLog(event, "LenderRewarded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EaseNowLenderWithdrawIterator is returned from FilterLenderWithdraw and is used to iterate over the raw logs and unpacked data for LenderWithdraw events raised by the EaseNow contract.
type EaseNowLenderWithdrawIterator struct {
	Event *EaseNowLenderWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EaseNowLenderWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EaseNowLenderWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EaseNowLenderWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EaseNowLenderWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EaseNowLenderWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EaseNowLenderWithdraw represents a LenderWithdraw event raised by the EaseNow contract.
type EaseNowLenderWithdraw struct {
	Lender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLenderWithdraw is a free log retrieval operation binding the contract event 0xf1efcc5bb6f7c762ce11c94881410b55191722a008338c0c9a88203c74604aea.
//
// Solidity: event LenderWithdraw(address indexed lender, uint256 amount)
func (_EaseNow *EaseNowFilterer) FilterLenderWithdraw(opts *bind.FilterOpts, lender []common.Address) (*EaseNowLenderWithdrawIterator, error) {

	var lenderRule []interface{}
	for _, lenderItem := range lender {
		lenderRule = append(lenderRule, lenderItem)
	}

	logs, sub, err := _EaseNow.contract.FilterLogs(opts, "LenderWithdraw", lenderRule)
	if err != nil {
		return nil, err
	}
	return &EaseNowLenderWithdrawIterator{contract: _EaseNow.contract, event: "LenderWithdraw", logs: logs, sub: sub}, nil
}

// WatchLenderWithdraw is a free log subscription operation binding the contract event 0xf1efcc5bb6f7c762ce11c94881410b55191722a008338c0c9a88203c74604aea.
//
// Solidity: event LenderWithdraw(address indexed lender, uint256 amount)
func (_EaseNow *EaseNowFilterer) WatchLenderWithdraw(opts *bind.WatchOpts, sink chan<- *EaseNowLenderWithdraw, lender []common.Address) (event.Subscription, error) {

	var lenderRule []interface{}
	for _, lenderItem := range lender {
		lenderRule = append(lenderRule, lenderItem)
	}

	logs, sub, err := _EaseNow.contract.WatchLogs(opts, "LenderWithdraw", lenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EaseNowLenderWithdraw)
				if err := _EaseNow.contract.UnpackLog(event, "LenderWithdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLenderWithdraw is a log parse operation binding the contract event 0xf1efcc5bb6f7c762ce11c94881410b55191722a008338c0c9a88203c74604aea.
//
// Solidity: event LenderWithdraw(address indexed lender, uint256 amount)
func (_EaseNow *EaseNowFilterer) ParseLenderWithdraw(log types.Log) (*EaseNowLenderWithdraw, error) {
	event := new(EaseNowLenderWithdraw)
	if err := _EaseNow.contract.UnpackLog(event, "LenderWithdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EaseNowOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the EaseNow contract.
type EaseNowOwnershipTransferredIterator struct {
	Event *EaseNowOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EaseNowOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EaseNowOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EaseNowOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EaseNowOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EaseNowOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EaseNowOwnershipTransferred represents a OwnershipTransferred event raised by the EaseNow contract.
type EaseNowOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_EaseNow *EaseNowFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*EaseNowOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EaseNow.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &EaseNowOwnershipTransferredIterator{contract: _EaseNow.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_EaseNow *EaseNowFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EaseNowOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EaseNow.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EaseNowOwnershipTransferred)
				if err := _EaseNow.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_EaseNow *EaseNowFilterer) ParseOwnershipTransferred(log types.Log) (*EaseNowOwnershipTransferred, error) {
	event := new(EaseNowOwnershipTransferred)
	if err := _EaseNow.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EaseNowTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the EaseNow contract.
type EaseNowTransferIterator struct {
	Event *EaseNowTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EaseNowTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EaseNowTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EaseNowTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EaseNowTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EaseNowTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EaseNowTransfer represents a Transfer event raised by the EaseNow contract.
type EaseNowTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_EaseNow *EaseNowFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EaseNowTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EaseNow.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EaseNowTransferIterator{contract: _EaseNow.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_EaseNow *EaseNowFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *EaseNowTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EaseNow.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EaseNowTransfer)
				if err := _EaseNow.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_EaseNow *EaseNowFilterer) ParseTransfer(log types.Log) (*EaseNowTransfer, error) {
	event := new(EaseNowTransfer)
	if err := _EaseNow.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EaseNowUserDefaultedIterator is returned from FilterUserDefaulted and is used to iterate over the raw logs and unpacked data for UserDefaulted events raised by the EaseNow contract.
type EaseNowUserDefaultedIterator struct {
	Event *EaseNowUserDefaulted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EaseNowUserDefaultedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EaseNowUserDefaulted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EaseNowUserDefaulted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EaseNowUserDefaultedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EaseNowUserDefaultedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EaseNowUserDefaulted represents a UserDefaulted event raised by the EaseNow contract.
type EaseNowUserDefaulted struct {
	UserAddress   common.Address
	DefaultAmount *big.Int
	PrivareData   [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUserDefaulted is a free log retrieval operation binding the contract event 0xf08fd0dc9b5a0e09baf039a4d7a8897a6ab538c6de1e8e4c40c82560090b3875.
//
// Solidity: event UserDefaulted(address indexed userAddress, uint256 defaultAmount, bytes32 privareData)
func (_EaseNow *EaseNowFilterer) FilterUserDefaulted(opts *bind.FilterOpts, userAddress []common.Address) (*EaseNowUserDefaultedIterator, error) {

	var userAddressRule []interface{}
	for _, userAddressItem := range userAddress {
		userAddressRule = append(userAddressRule, userAddressItem)
	}

	logs, sub, err := _EaseNow.contract.FilterLogs(opts, "UserDefaulted", userAddressRule)
	if err != nil {
		return nil, err
	}
	return &EaseNowUserDefaultedIterator{contract: _EaseNow.contract, event: "UserDefaulted", logs: logs, sub: sub}, nil
}

// WatchUserDefaulted is a free log subscription operation binding the contract event 0xf08fd0dc9b5a0e09baf039a4d7a8897a6ab538c6de1e8e4c40c82560090b3875.
//
// Solidity: event UserDefaulted(address indexed userAddress, uint256 defaultAmount, bytes32 privareData)
func (_EaseNow *EaseNowFilterer) WatchUserDefaulted(opts *bind.WatchOpts, sink chan<- *EaseNowUserDefaulted, userAddress []common.Address) (event.Subscription, error) {

	var userAddressRule []interface{}
	for _, userAddressItem := range userAddress {
		userAddressRule = append(userAddressRule, userAddressItem)
	}

	logs, sub, err := _EaseNow.contract.WatchLogs(opts, "UserDefaulted", userAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EaseNowUserDefaulted)
				if err := _EaseNow.contract.UnpackLog(event, "UserDefaulted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserDefaulted is a log parse operation binding the contract event 0xf08fd0dc9b5a0e09baf039a4d7a8897a6ab538c6de1e8e4c40c82560090b3875.
//
// Solidity: event UserDefaulted(address indexed userAddress, uint256 defaultAmount, bytes32 privareData)
func (_EaseNow *EaseNowFilterer) ParseUserDefaulted(log types.Log) (*EaseNowUserDefaulted, error) {
	event := new(EaseNowUserDefaulted)
	if err := _EaseNow.contract.UnpackLog(event, "UserDefaulted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EaseNowUserRegistredIterator is returned from FilterUserRegistred and is used to iterate over the raw logs and unpacked data for UserRegistred events raised by the EaseNow contract.
type EaseNowUserRegistredIterator struct {
	Event *EaseNowUserRegistred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EaseNowUserRegistredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EaseNowUserRegistred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EaseNowUserRegistred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EaseNowUserRegistredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EaseNowUserRegistredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EaseNowUserRegistred represents a UserRegistred event raised by the EaseNow contract.
type EaseNowUserRegistred struct {
	UserAddress common.Address
	PrivateData [32]byte
	CreditLimit *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUserRegistred is a free log retrieval operation binding the contract event 0x7338f2f0fce044e8ff9f8257e4426c8912aa5dc780cbf77f446d4b10dd11a7e0.
//
// Solidity: event UserRegistred(address indexed userAddress, bytes32 privateData, uint256 creditLimit)
func (_EaseNow *EaseNowFilterer) FilterUserRegistred(opts *bind.FilterOpts, userAddress []common.Address) (*EaseNowUserRegistredIterator, error) {

	var userAddressRule []interface{}
	for _, userAddressItem := range userAddress {
		userAddressRule = append(userAddressRule, userAddressItem)
	}

	logs, sub, err := _EaseNow.contract.FilterLogs(opts, "UserRegistred", userAddressRule)
	if err != nil {
		return nil, err
	}
	return &EaseNowUserRegistredIterator{contract: _EaseNow.contract, event: "UserRegistred", logs: logs, sub: sub}, nil
}

// WatchUserRegistred is a free log subscription operation binding the contract event 0x7338f2f0fce044e8ff9f8257e4426c8912aa5dc780cbf77f446d4b10dd11a7e0.
//
// Solidity: event UserRegistred(address indexed userAddress, bytes32 privateData, uint256 creditLimit)
func (_EaseNow *EaseNowFilterer) WatchUserRegistred(opts *bind.WatchOpts, sink chan<- *EaseNowUserRegistred, userAddress []common.Address) (event.Subscription, error) {

	var userAddressRule []interface{}
	for _, userAddressItem := range userAddress {
		userAddressRule = append(userAddressRule, userAddressItem)
	}

	logs, sub, err := _EaseNow.contract.WatchLogs(opts, "UserRegistred", userAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EaseNowUserRegistred)
				if err := _EaseNow.contract.UnpackLog(event, "UserRegistred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserRegistred is a log parse operation binding the contract event 0x7338f2f0fce044e8ff9f8257e4426c8912aa5dc780cbf77f446d4b10dd11a7e0.
//
// Solidity: event UserRegistred(address indexed userAddress, bytes32 privateData, uint256 creditLimit)
func (_EaseNow *EaseNowFilterer) ParseUserRegistred(log types.Log) (*EaseNowUserRegistred, error) {
	event := new(EaseNowUserRegistred)
	if err := _EaseNow.contract.UnpackLog(event, "UserRegistred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
